var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': 'week', 'text': '', 'tags': '', 'url': 'week.html'}, {'title': 'week2', 'text': '本周目標:架設個人網站 \n \n 1.先至個人githubthub建立一個新的倉儲將其命名為 "cad2019" 並將下面的 \n lnitialize this repository with a README選項打勾以建立倉儲 \n 並且設定github page \n \n (建立倉儲) \n \n (選擇分頁) \n 2.下載\xa0 課程套件 \xa0並解壓縮放入隨身碟中 \n \n (下載可攜套件) \n \n (解壓縮) \n 3.將倉儲 git clone 下來(若在學校中需要設定proxy) \n \n (複製倉儲網址) \n \n (clone下來) \n \n (到home_mdecourse設定proxy) \n \n (開啟.gitcongif設定proxy=[2001:288:6004:17::17]:3128) \n 4.這學期近端有所變更需要使用 git submodule 將子模組下載下來 \n 其指令為 git submodule add https://github.com/mdecourse/cmsimde.git cmsimde \n \n (利用submodule載入子模組) \n 5.進入倉儲資料夾中打開 cmsimde --> up_dir 將檔案全選後複製到倉儲資料夾中 \n \n (打開倉儲資料夾中的cmsimde) \n \n (在開啟裡面的up_dir) \n \n (將檔案全選後copy並回到倉儲資料夾貼上) \n 6.在cmd視窗中切換至 cmsimdede 資料夾 輸入 python wsgi.py 開啟近端伺服器 \n (首次執行需額外再輸入 python -m pip install flask_cors下載套件) \n \n (下載 flask_cors 套件) \n \n (架設近端伺服器) \n 7.打開瀏覽器輸入 https://localhost:9443 (埠號為個人所設定 預設為9443)進行編輯 \n 且打開靜態網頁查看編輯結果 \n \n (動態近端網址) \n \n (更改動態近端內容後轉化為靜態近端) \n \n (靜態近端網址) \n \n (查看是否修改成功) \n 8.編輯完成後將檔案 git push 至雲端後 完成本周的目標 \n \n (將檔案push至github) \n', 'tags': '', 'url': 'week2.html'}, {'title': 'week3', 'text': '\n 本周目標:編譯Solvespace \n 1.先將\xa0Y:\\portablegit\\bin\\sh.exe\xa0改名為 sh_rename_for_solvespace.exe \n 2.利用利用 git version 檢查當前 git 版本 若是在2.13以上則可使用 git clone --recurse-submodules 取得所有子模組資料 \n git clone --recurse-submodules https://github.com/solvespace/solvespace.git solvespace \n 3.接下來到 Y:\\tmp\\solvespace\\extlib\\angle\\CMakeLists.txt 713&741行看是否為 \n #list(APPEND ANGLE_DEFINITIONS #"-DANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES={ \\"d3dcompiler_47.dll\\", \\"d3dcompiler_46.dll\\", \\"d3dcompiler_43.dll\\" }") endif() \n \n 4.回到 solvespace 目錄輸入 \n cd extlib -> cd libpng -> mkdir build ->\xa0cd build \n 利用 cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release 搜尋系統有哪些可用項目 \n 使用 mingw32-make 編譯出一個動態連結庫 \n 5.不過 libpng.dll.a 是靜態的要到 Y:\\tmp\\solvespace\\extlib\\libping\\build\xa0 \n 將他改名成 libpng_static.a 後將它複製 \n 到 Y:\\msys64\\mingw64\\lib 將它貼上 \n 6.然後回到 solvespace 目錄輸入 \n mkdir build ->\xa0cd build ->\xa0cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release\xa0 搜尋系統有哪些可用項目 \n 最後 mingw32-make 等待其編譯 \n 7.完成且成功後就可以啟動 solvespace開始學習繪製囉 \n', 'tags': '', 'url': 'week3.html'}]};